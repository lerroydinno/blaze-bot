(() => { if (window.doubleGameInjected) return; window.doubleGameInjected = true;

// --- Estilos --- const styleEl = document.createElement('style'); styleEl.textContent = .dg-container { position: fixed; top: 20px; right: 20px; width: 320px; background-color: #1f2937; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5); font-family: Arial, sans-serif; z-index: 999999; max-height: 90vh; overflow-y: auto; color: #f3f4f6; } .dg-header { background-color: #111827; display: flex; align-items: center; justify-content: space-between; padding: 10px; } .dg-header h1 { margin: 0; font-size: 16px; flex: 1; text-align: center; } .dg-close-btn { background: none; border: none; color: #f3f4f6; cursor: pointer; font-size: 16px; width: 30px; text-align: center; } .dg-drag-handle { cursor: move; width: 30px; text-align: center; } .dg-content { padding: 15px; background-image: url('https://t.me/i/userpic/320/chefe00blaze.jpg'); background-size: cover; background-position: center; position: relative; } .dg-content::before { content: ''; position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(31, 41, 55, 0.85); z-index: -1; } .dg-section { margin-bottom: 15px; background-color: #111827c9; border-radius: 6px; padding: 10px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3); position: relative; z-index: 1; } .dg-section-title { font-weight: bold; margin-bottom: 10px; font-size: 14px; } .dg-connection { padding: 6px; border-radius: 4px; text-align: center; font-size: 12px; font-weight: bold; margin-bottom: 10px; position: relative; z-index: 1; } .dg-connected { background-color: #111827c9; color: #10b981; } .dg-disconnected { background-color: #ef4444; color: #f3f4f6; } .dg-btn { padding: 6px 10px; border-radius: 4px; border: none; cursor: pointer; font-size: 12px; transition: background-color 0.2s; color: #f3f4f6; } .dg-btn-primary { background-color: #3b82f6; } .dg-btn-primary:hover { background-color: #2563eb; } .dg-btn-disabled { background-color: #4b5563; cursor: not-allowed; } .dg-status-text { text-align: center; margin-bottom: 10px; font-size: 14px; } .dg-rolling { animation: pulse 1.5s infinite; } @keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.5; } 100% { opacity: 1; } } .dg-result { display: inline-flex; justify-content: center; align-items: center; width: 40px; height: 40px; border-radius: 50%; border: 2px solid; font-weight: bold; margin: 0 auto; } .dg-white { background-color: #f3f4f6; color: #1f2937; border-color: #d1d5db; } .dg-red { background-color: #dc2626; color: #f3f4f6; border-color: #b91c1c; } .dg-black { background-color: #000; color: #f3f4f6; border-color: #4b5563; } .dg-gray { background-color: #4b5563; color: #f3f4f6; border-color: #6b7280; } .dg-prediction-box { text-align: center; margin-bottom: 10px; } .dg-prediction-title { font-size: 13px; margin-bottom: 8px; } .dg-prediction { width: 70px; height: 70px; border-radius: 50%; display: flex; justify-content: center; align-items: center; margin: 0 auto; font-weight: bold; font-size: 14px; border: 2px solid; } .dg-prediction-accuracy { text-align: center; font-size: 12px; color: #f3f4f6; margin-top: 5px; } .dg-prediction-result { padding: 8px; border-radius: 4px; text-align: center; font-weight: bold; margin-top: 10px; font-size: 14px; } .dg-win { background-color: #047857; } .dg-lose { background-color: #b91c1c; } .dg-floating-image { position: fixed; bottom: 20px; right: 20px; width: 80px; height: 80px; border-radius: 50%; cursor: pointer; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); z-index: 999998; transition: transform 0.2s; border: 3px solid #3b82f6; } .dg-floating-image:hover { transform: scale(1.05); }; document.head.appendChild(styleEl);

// --- Botão flutuante --- const floatingBtn = document.createElement('img'); floatingBtn.id = 'dg-floating-image'; floatingBtn.className = 'dg-floating-image'; floatingBtn.src = 'https://t.me/i/userpic/320/chefe00blaze.jpg'; floatingBtn.alt = 'Blaze Chefe'; document.body.appendChild(floatingBtn);

// --- Criação do painel --- function createPanel() { const container = document.createElement('div'); container.id = 'double-game-container'; container.className = 'dg-container'; container.innerHTML =  <div class="dg-header"> <div class="dg-drag-handle">⋮⋮</div> <h1>@wallan00chefe</h1> <button class="dg-close-btn" id="dg-close">×</button> </div> <div class="dg-content"> <div id="dg-connection-status" class="dg-connection dg-disconnected">Desconectado - tentando conectar...</div> <div class="dg-section"> <div class="dg-section-title" id="dg-game-status-label">Status do Jogo</div> <div class="dg-game-status"> <p class="dg-status-text"><span id="dg-game-status">Esperando</span></p> <div id="dg-result-container" style="display:none;"> <div id="dg-result" class="dg-result dg-gray">?</div> <p id="dg-color-name" style="margin-top:5px;font-size:13px;">-</p> </div> </div> </div> <div class="dg-section" id="dg-consumer-mode"> <div id="dg-prediction-container" class="dg-prediction-box" style="display:none;"> <p class="dg-prediction-title">Previsão para esta rodada:</p> <div id="dg-prediction" class="dg-prediction dg-gray">?</div> <p id="dg-prediction-accuracy" class="dg-prediction-accuracy">--</p> </div> <button id="dg-new-prediction" class="dg-btn dg-btn-primary" style="width:100%;margin-top:10px;">Gerar Nova Previsão</button> <div id="dg-result-message" class="dg-prediction-result" style="display:none;">Resultado</div> </div> </div>; document.body.appendChild(container); document.getElementById('dg-close').onclick = () => { container.style.display = 'none'; floatingBtn.style.display = 'block'; }; container.style.display = 'block'; return container; }

// --- Drag & Drop --- function makeDraggable(el) { let startX, startY, initX, initY; const handle = el.querySelector('.dg-drag-handle'); handle.addEventListener('mousedown', e => { e.preventDefault(); startX = e.clientX; startY = e.clientY; initX = el.offsetLeft; initY = el.offsetTop; document.addEventListener('mousemove', onMove); document.addEventListener('mouseup', onUp); }); function onMove(e) { const dx = e.clientX - startX; const dy = e.clientY - startY; el.style.left = Math.min(Math.max(0, initX + dx), window.innerWidth - el.offsetWidth) + 'px'; el.style.top = Math.min(Math.max(0, initY + dy), window.innerHeight - el.offsetHeight) + 'px'; } function onUp() { document.removeEventListener('mousemove', onMove); document.removeEventListener('mouseup', onUp); } }

// --- Inicialização --- const panel = createPanel(); makeDraggable(panel); floatingBtn.style.display = 'none'; floatingBtn.onclick = () => { panel.style.display = 'block'; floatingBtn.style.display = 'none'; };

// --- Elementos UI --- const connStatusEl = document.getElementById('dg-connection-status'); const statusEl     = document.getElementById('dg-game-status'); const resultCont   = document.getElementById('dg-result-container'); const resultEl     = document.getElementById('dg-result'); const colorNameEl  = document.getElementById('dg-color-name'); const predCont     = document.getElementById('dg-prediction-container'); const predEl       = document.getElementById('dg-prediction'); const predAccEl    = document.getElementById('dg-prediction-accuracy'); const newPredBtn   = document.getElementById('dg-new-prediction'); const resultMsgEl  = document.getElementById('dg-result-message');

let ws, pingInterval; let gameData = { status: 'waiting', color: null, roll: null }; let prediction = null;

const colorMap = { 0: { name: 'Branco',   class: 'dg-white' }, 1: { name: 'Vermelho', class: 'dg-red'   }, 2: { name: 'Preto',    class: 'dg-black' } };

newPredBtn.addEventListener('click', () => { if (gameData.status === 'waiting') generatePrediction(); });

function generatePrediction() { prediction = Math.floor(Math.random() * 3); updatePredictionUI(); } function updatePredictionUI() { if (prediction !== null) { predCont.style.display = 'block'; predEl.className = 'dg-prediction ' + colorMap[prediction].class; predEl.textContent = colorMap[prediction].name; predAccEl.textContent = 'Assertividade: ' + (Math.random() < 0.5 ? '99.99%' : '100%'); } }

function connectWS() { ws = new WebSocket('wss://api-gaming.blaze.bet.br/replication/?EIO=3&transport=websocket'); ws.onopen = () => { connStatusEl.className = 'dg-connection dg-connected'; connStatusEl.textContent = 'Conectado ao servidor'; ws.send('421["cmd",{"id":"subscribe","payload":{"room":"double_room_1"}}]'); pingInterval = setInterval(() => ws.readyState === WebSocket.OPEN && ws.send('2'), 30000); }; ws.onmessage = msg => { if (msg.data.startsWith('42[')) { try { const [ , { payload } ] = JSON.parse(msg.data.replace(/^42/, '')); if (payload) handleGameData(payload); } catch {}; } }; ws.onclose = () => { connStatusEl.className = 'dg-connection dg-disconnected'; connStatusEl.textContent = 'Desconectado - tentando reconectar...'; clearInterval(pingInterval); setTimeout(connectWS, 5000); }; }

function handleGameData(data) { gameData = data; statusEl.textContent = capitalize(data.status); if (data.status === 'rolling') { resultCont.style.display = 'block'; const real = colorMap[data.color]; resultEl.className = 'dg-result ' + real.class; resultEl.textContent = data.roll; colorNameEl.textContent = real.name; } else if (data.status === 'complete') { resultCont.style.display = 'block'; const real = colorMap[data.color]; resultEl.className = 'dg-result ' + real.class; resultEl.textContent = data.roll; colorNameEl.textContent = real.name; } else { resultCont.style.display = 'none'; } }

function capitalize(s) { return s.charAt(0).toUpperCase() + s.slice(1); }

// start connectWS();

function showPanel() { panel.style.display = 'block'; floatingBtn.style.display = 'none'; } document.addEventListener('dblclick', showPanel); let lastTap = 0; document.addEventListener('touchend', e => { const now = Date.now(); if (now - lastTap < 300) { showPanel(); e.preventDefault(); } lastTap = now; }); })();

